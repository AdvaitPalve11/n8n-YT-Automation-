"""
Dynamically Generated Manim Animation
Topic: List of mathematical constants
Generated by AI-powered video creation system
"""

from manim import *
import numpy as np

class DynamicScene(Scene):
    """Custom animation for: List of mathematical constants"""
    
    def construct(self):
        # Add audio
        audio_file = "output/audio.mp3"
        from pathlib import Path
        if Path(audio_file).exists():
            self.add_sound(audio_file)
        
        # === INTRO (0-4 seconds) ===
        self.show_intro()
        
        # === MAIN CONTENT (4-50 seconds) ===
        self.show_key_points()

        # === OUTRO (50-60 seconds) ===
        self.show_outro()
    
    def show_intro(self):
        """Show title and topic introduction with dynamic animation"""
        # Animated background elements
        circles = VGroup(*[
            Circle(radius=0.3 + i*0.2, color=BLUE, stroke_width=2, stroke_opacity=0.3)
            for i in range(5)
        ])
        
        self.play(
            LaggedStart(*[Create(c) for c in circles], lag_ratio=0.2),
            run_time=1
        )
        self.play(FadeOut(circles), run_time=0.5)
        
        # Main title with emphasis
        title = Text(
            "List of mathematical constants",
            font_size=56,
            weight=BOLD,
            color=YELLOW,
            gradient=(YELLOW, GOLD)
        )
        
        # Ensure title fits with proper margin
        max_width = config.frame_width - 1.5
        if title.width > max_width:
            title.scale(max_width / title.width)
        
        # Ensure title height is reasonable
        max_height = 2.5
        if title.height > max_height:
            title.scale(max_height / title.height)
        
        # Subtitle with icon
        subtitle = Text("📐 Mathematics", font_size=40, color=BLUE_B)
        subtitle.next_to(title, DOWN, buff=0.6)
        
        # Ensure subtitle fits
        if subtitle.width > max_width:
            subtitle.scale(max_width / subtitle.width)
        
        # Animated entrance
        self.play(
            Write(title, run_time=1.3),
            rate_func=smooth
        )
        self.play(
            FadeIn(subtitle, shift=UP, scale=1.2),
            run_time=0.7
        )
        
        # Pulse effect
        self.play(
            title.animate.scale(1.05),
            run_time=0.3
        )
        self.play(
            title.animate.scale(1/1.05),
            run_time=0.3
        )
        
        self.wait(0.4)
        
        # Exit with style
        self.play(
            FadeOut(title, shift=UP, scale=0.8),
            FadeOut(subtitle, shift=UP, scale=0.8),
            run_time=0.6
        )
    
    def animate_number_sequence(self):
        """Animate number sequences with dynamic visuals"""
        # Title
        title = Text("Number Sequence", font_size=42, color=GOLD)
        title.to_edge(UP, buff=0.8)
        self.play(FadeIn(title, shift=DOWN), run_time=0.6)
        
        # Fibonacci or generic sequence
        sequence = [1, 1, 2, 3, 5, 8, 13, 21]
        numbers = VGroup()
        
        # Create numbers in a grid
        for i, num in enumerate(sequence):
            number_mob = Text(
                str(num),
                font_size=52,
                color=YELLOW,
                weight=BOLD
            )
            
            # Position in flowing layout
            if i < 4:
                number_mob.move_to(LEFT * 3 + RIGHT * i * 1.8 + UP * 0.5)
            else:
                number_mob.move_to(LEFT * 3 + RIGHT * (i-4) * 1.8 + DOWN * 0.8)
            
            numbers.add(number_mob)
            
            # Animated entrance
            self.play(
                FadeIn(number_mob, scale=0.5),
                number_mob.animate.set_color(YELLOW),
                run_time=0.4
            )
        
        self.wait(0.8)
        
        # Show connections with arrows
        arrows = VGroup()
        for i in range(len(numbers) - 1):
            if i < 3 or i >= 4:
                arrow = Arrow(
                    numbers[i].get_right(),
                    numbers[i+1].get_left(),
                    buff=0.1,
                    stroke_width=3,
                    color=GREEN,
                    max_tip_length_to_length_ratio=0.15
                )
                arrows.add(arrow)
        
        self.play(LaggedStart(*[Create(a) for a in arrows], lag_ratio=0.15), run_time=1.2)
        
        # Highlight pattern with color wave
        for num in numbers:
            self.play(
                num.animate.set_color_by_gradient(GREEN, TEAL).scale(1.1),
                run_time=0.25
            )
            self.play(
                num.animate.set_color(YELLOW).scale(1/1.1),
                run_time=0.25
            )
        
        self.wait(1)
        
        # Exit
        self.play(
            FadeOut(VGroup(numbers, arrows, title), shift=DOWN),
            run_time=0.8
        )
    
    def animate_geometry(self):
        """Animate geometric shapes and properties"""
        shapes = VGroup(
            Circle(radius=0.8, color=BLUE, fill_opacity=0.3),
            Square(side_length=1.6, color=GREEN, fill_opacity=0.3),
            Triangle(color=RED, fill_opacity=0.3)
        ).arrange(RIGHT, buff=0.8)
        
        self.play(Create(shapes), run_time=2)
        self.wait(1)
        self.play(FadeOut(shapes), run_time=0.5)

    def animate_theorem(self):
        """Animate theorem or mathematical proof"""
        theorem_text = Text(
            "List of mathematical constants",
            font_size=44,
            color=GOLD,
            weight=BOLD
        )
        
        if theorem_text.width > config.frame_width - 1:
            theorem_text.scale_to_fit_width(config.frame_width - 1)
        
        theorem_text.to_edge(UP, buff=1)
        
        self.play(Write(theorem_text), run_time=1.5)
        self.wait(0.5)
        
        # Show the main formula
        formula = MathTex(
            r"List of mathematical constants",
            font_size=56,
            color=YELLOW
        )
        
        self.play(Write(formula), run_time=2)
        self.wait(1.5)
        
        # Highlight parts
        self.play(Indicate(formula, color=GREEN, scale_factor=1.2), run_time=1)
        self.wait(1)
        
        self.play(FadeOut(VGroup(theorem_text, formula)), run_time=0.5)
    
    def animate_formula(self):
        """Animate mathematical formulas with visual flair"""
        # Background glow effect
        glow_circle = Circle(radius=2, color=BLUE, fill_opacity=0.1, stroke_width=0)
        
        self.play(FadeIn(glow_circle), run_time=0.5)
        
        # Main formula
        formula = MathTex(
            r"List of mathematical constants",
            font_size=68,
            color=BLUE
        )
        
        # Build formula piece by piece
        self.play(Write(formula), run_time=2.5)
        self.wait(0.8)
        
        # Colorful transformation
        self.play(
            formula.animate.set_color_by_gradient(YELLOW, GOLD, RED).scale(1.15),
            glow_circle.animate.scale(1.2).set_color(YELLOW),
            run_time=1
        )
        
        self.wait(0.5)
        
        # Highlight each part
        self.play(
            Indicate(formula, color=GREEN, scale_factor=1.3),
            run_time=1.2
        )
        
        # Return to original
        self.play(
            formula.animate.set_color(BLUE).scale(1/1.15),
            glow_circle.animate.scale(1/1.2).set_color(BLUE),
            run_time=0.8
        )
        
        self.wait(1)
        
        # Exit with rotation
        self.play(
            FadeOut(VGroup(formula, glow_circle), scale=1.5, shift=UP),
            run_time=0.8
        )
    
    def animate_fractal(self):
        """Animate fractal patterns"""
        def koch_curve(order, length=3):
            if order == 0:
                return Line(ORIGIN, RIGHT * length)
            else:
                smaller = koch_curve(order - 1, length / 3)
                return VGroup(
                    smaller.copy(),
                    smaller.copy().rotate(PI/3).shift(RIGHT * length/3),
                    smaller.copy().rotate(-PI/3).shift(RIGHT * 2*length/3),
                    smaller.copy().shift(RIGHT * length)
                )
        
        fractal = VGroup()
        for i in range(4):
            curve = Line(ORIGIN, RIGHT * 2, color=BLUE, stroke_width=3)
            curve.rotate(i * PI/2).shift(ORIGIN)
            fractal.add(curve)
        
        self.play(Create(fractal), run_time=3)
        self.wait(1)
        self.play(FadeOut(fractal), run_time=0.5)
    
    def animate_calculus(self):
        """Animate calculus concepts"""
        axes = Axes(
            x_range=[-3, 3, 1],
            y_range=[-2, 4, 1],
            x_length=6,
            y_length=4,
            tips=False
        )
        
        # Plot a function
        graph = axes.plot(lambda x: x**2, color=YELLOW, stroke_width=4)
        
        self.play(Create(axes), run_time=1)
        self.play(Create(graph), run_time=2)
        self.wait(1.5)
        
        self.play(FadeOut(VGroup(axes, graph)), run_time=0.5)
    
    def animate_graph_network(self):
        """Animate graph theory networks"""
        vertices = VGroup(*[
            Dot(point=np.array([np.cos(i*2*PI/5), np.sin(i*2*PI/5), 0]) * 2, color=BLUE, radius=0.15)
            for i in range(5)
        ])
        
        edges = VGroup()
        for i in range(5):
            for j in range(i+1, 5):
                edge = Line(
                    vertices[i].get_center(),
                    vertices[j].get_center(),
                    color=YELLOW,
                    stroke_width=2
                )
                edges.add(edge)
        
        self.play(Create(edges), run_time=2)
        self.play(FadeIn(vertices, lag_ratio=0.1), run_time=1)
        self.wait(1.5)
        
        self.play(FadeOut(VGroup(vertices, edges)), run_time=0.5)
    
    def animate_probability(self):
        """Animate probability concepts"""
        # Coin flip visualization
        coins = VGroup(*[
            Circle(radius=0.3, color=YELLOW, fill_opacity=0.5).shift(LEFT * 2 + RIGHT * i * 0.7)
            for i in range(6)
        ])
        
        self.play(FadeIn(coins, lag_ratio=0.1), run_time=1.5)
        self.wait(1)
        
        # Random colors
        for coin in coins:
            color = random.choice([RED, GREEN])
            self.play(coin.animate.set_fill(color, opacity=0.7), run_time=0.2)
        
        self.wait(1)
        self.play(FadeOut(coins), run_time=0.5)
    
    def show_key_points(self):
        """Show key points from the script with dynamic animations"""

        # Point 1: Full screen emphasis (Duration: 2.5s)
        bg_box_1 = Rectangle(
            width=config.frame_width - 1.0,
            height=4.0,
            fill_color=BLUE_D,
            fill_opacity=0.85,
            stroke_color=YELLOW,
            stroke_width=4
        )
        
        point_text_1 = Paragraph(
            "Let me tell you about List of mathematical constants.",
            font_size=32,
            color=WHITE,
            line_spacing=1.5,
            alignment="center",
            width=config.frame_width - 2.0
        ).move_to(ORIGIN)
        
        self.play(FadeIn(bg_box_1, scale=0.95), run_time=0.5)
        self.play(Write(point_text_1, run_time=1.2))
        self.wait(2.5)
        self.play(FadeOut(VGroup(bg_box_1, point_text_1), shift=UP), run_time=0.5)

        # Point 2: Bullet point with icon (Duration: 2.6s)
        bullet_2 = Dot(color=YELLOW, radius=0.15).to_edge(LEFT, buff=0.8).shift(UP * 1.0)
        
        point_text_2 = Paragraph(
            "A mathematical constant is a key number whose value is fixed by...",
            font_size=30,
            color=WHITE,
            line_spacing=1.4,
            alignment="left",
            width=config.frame_width - 2.5
        )
        point_text_2.next_to(bullet_2, RIGHT, buff=0.4).align_to(bullet_2, UP)
        
        self.play(FadeIn(bullet_2, scale=2), run_time=0.3)
        self.play(Write(point_text_2, run_time=1.2))
        self.wait(2.64)
        self.play(FadeOut(VGroup(bullet_2, point_text_2), shift=LEFT), run_time=0.5)

        # Point 3: Text with animated underline (Duration: 2.5s)
        point_text_3 = Paragraph(
            "For example, the constant π may be defined as the ratio of...",
            font_size=30,
            color=WHITE,
            line_spacing=1.4,
            alignment="center",
            width=config.frame_width - 2.0
        ).move_to(ORIGIN)
        
        underline_3 = Line(
            point_text_3.get_left() + DOWN * 0.3,
            point_text_3.get_right() + DOWN * 0.3,
            color=GOLD,
            stroke_width=4
        )
        
        self.play(FadeIn(point_text_3, shift=DOWN), run_time=0.7)
        self.play(Create(underline_3), run_time=0.7)
        self.wait(2.5)
        self.play(FadeOut(VGroup(point_text_3, underline_3), shift=UP), run_time=0.5)

        # Point 4: Full screen emphasis (Duration: 3.3s)
        bg_box_4 = Rectangle(
            width=config.frame_width - 1.0,
            height=4.0,
            fill_color=BLUE_D,
            fill_opacity=0.85,
            stroke_color=YELLOW,
            stroke_width=4
        )
        
        point_text_4 = Paragraph(
            "The following list includes a decimal expansion and set containing each number,...",
            font_size=32,
            color=WHITE,
            line_spacing=1.5,
            alignment="center",
            width=config.frame_width - 2.0
        ).move_to(ORIGIN)
        
        self.play(FadeIn(bg_box_4, scale=0.95), run_time=0.5)
        self.play(Write(point_text_4, run_time=1.2))
        self.wait(3.28)
        self.play(FadeOut(VGroup(bg_box_4, point_text_4), shift=UP), run_time=0.5)

        # Point 5: Bullet point with icon (Duration: 3.9s)
        bullet_5 = Dot(color=YELLOW, radius=0.15).to_edge(LEFT, buff=0.8).shift(UP * 1.0)
        
        point_text_5 = Paragraph(
            "The column headings may be clicked to sort the table alphabetically, by decimal value, or by set.",
            font_size=30,
            color=WHITE,
            line_spacing=1.4,
            alignment="left",
            width=config.frame_width - 2.5
        )
        point_text_5.next_to(bullet_5, RIGHT, buff=0.4).align_to(bullet_5, UP)
        
        self.play(FadeIn(bullet_5, scale=2), run_time=0.3)
        self.play(Write(point_text_5, run_time=1.2))
        self.wait(3.88)
        self.play(FadeOut(VGroup(bullet_5, point_text_5), shift=LEFT), run_time=0.5)

    def show_outro(self):
        """Show outro with engaging call to action"""
        # Thank you message
        thanks = Text(
            "Thanks for Watching!",
            font_size=48,
            color=WHITE,
            weight=BOLD
        )
        
        self.play(Write(thanks, run_time=1.2))
        self.wait(0.8)
        self.play(FadeOut(thanks, shift=UP), run_time=0.5)
        
        # Animated CTA box with particles
        cta_box = Rectangle(
            width=config.frame_width - 1,
            height=2.8,
            fill_color=BLUE_D,
            fill_opacity=0.9,
            stroke_color=GOLD,
            stroke_width=8
        ).set_z_index(1)
        
        # Like icon (heart)
        heart = Text("❤️", font_size=60)
        heart.to_edge(LEFT, buff=1).shift(UP * 0.3)
        
        # Subscribe text
        cta_text = Text(
            "LIKE & SUBSCRIBE!",
            font_size=48,
            weight=BOLD,
            color=WHITE,
            gradient=(WHITE, YELLOW)
        )
        cta_text.next_to(heart, RIGHT, buff=0.4)
        
        # Bell icon
        bell = Text("🔔", font_size=50)
        bell.to_edge(RIGHT, buff=1).shift(UP * 0.3)
        
        cta_group = VGroup(cta_box, heart, cta_text, bell)
        
        # Animated entrance
        self.play(FadeIn(cta_box, scale=0.9), run_time=0.6)
        self.play(
            FadeIn(heart, shift=RIGHT, scale=1.5),
            Write(cta_text, run_time=1),
            FadeIn(bell, shift=LEFT, scale=1.5),
            run_time=1.2
        )
        
        # Pulse animation
        self.play(
            cta_group.animate.scale(1.08),
            run_time=0.4
        )
        self.play(
            cta_group.animate.scale(1/1.08),
            run_time=0.4
        )
        
        # Wiggle effect on icons
        self.play(
            heart.animate.rotate(0.2),
            bell.animate.rotate(-0.2),
            run_time=0.3
        )
        self.play(
            heart.animate.rotate(-0.2),
            bell.animate.rotate(0.2),
            run_time=0.3
        )
        
        self.wait(1.5)


# Configure for vertical video (YouTube Shorts)
if __name__ == "__main__":
    from manim import config
    config.pixel_height = 1920
    config.pixel_width = 1080
    config.frame_height = 16.0
    config.frame_width = 9.0
